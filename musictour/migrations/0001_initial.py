# Generated by Django 5.2.1 on 2025-05-22 14:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Luogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('indirizzo', models.CharField(max_length=200)),
                ('capienza', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Utente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_partecipante', models.BooleanField(default=False)),
                ('is_organizzatore', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('data', models.DateTimeField()),
                ('descrizione', models.TextField()),
                ('capienza', models.IntegerField()),
                ('luogo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='musictour.luogo')),
            ],
        ),
        migrations.CreateModel(
            name='Organizzatore',
            fields=[
                ('id_organizzatore', models.AutoField(primary_key=True, serialize=False)),
                ('nome', models.CharField(max_length=100)),
                ('cognome', models.CharField(max_length=100)),
                ('utente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organizza',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_organizzazione', models.DateField(blank=True, null=True)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.evento')),
                ('organizzatore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.organizzatore')),
            ],
        ),
        migrations.AddField(
            model_name='evento',
            name='organizzatori',
            field=models.ManyToManyField(related_name='eventi_organizzati', through='musictour.Organizza', to='musictour.organizzatore'),
        ),
        migrations.CreateModel(
            name='Partecipante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('cognome', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('utente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Prenotazione',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_prenotazione', models.DateField(auto_now_add=True)),
                ('codice_conferma', models.CharField(max_length=20)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.evento')),
                ('partecipante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.partecipante')),
            ],
        ),
        migrations.CreateModel(
            name='Recensione',
            fields=[
                ('id_recensione', models.AutoField(primary_key=True, serialize=False)),
                ('punteggio', models.IntegerField()),
                ('data', models.DateField(auto_now_add=True)),
                ('testo', models.TextField(blank=True, null=True)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.evento')),
                ('partecipante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.partecipante')),
            ],
        ),
        migrations.CreateModel(
            name='Scrive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(auto_now_add=True)),
                ('recensione', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='musictour.recensione')),
                ('utente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ubicazione',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orario_fine', models.TimeField(blank=True, null=True)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.evento')),
                ('luogo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='musictour.luogo')),
            ],
        ),
    ]
